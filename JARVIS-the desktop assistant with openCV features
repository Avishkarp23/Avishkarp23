import pyttsx3
import random as rd
import datetime as dt
import speech_recognition as sr
import wikipedia
import webbrowser
import pywhatkit as kit
import os
import pywikihow
from PyQt5 import QtWidgets,QtCore,QtGui
from PyQt5.QtCore import QTimer,QTime,QDate,Qt
from PyQt5.QtGui import QMovie
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
#from  PyQt5.uic import loadUiType
from  jarvisui import Ui_mainWindow
from pywikihow import search_wikihow
import sys

en=pyttsx3.init()
rate=en.getProperty("rate")
en.setProperty("rate",200)
contactl={"sandeep sir":"+919503368050","abhay":"+919284271167","ayush":"+918793513988","piyush":"+918530919764","ganesh":"+918446556697"}
def sp(audio):
    en.say(audio)
    en.runAndWait()
def wishme():
    hour=int(dt.datetime.now().hour)
    if 0<hour<12:
        sp("Good morning sir")
    elif  12<hour<17:
        sp("good afternoon ,sir ")
    else:
        sp("good evening sir,")
    sp(" this is jarvis ")
class MainThread(QThread,QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui=Ui_mainWindow()


    def run(self):
        wishme()
        sp("say  ok jarvis to continue")
        while True:
            self.query=self.takecommand().lower()
            if"ok jarvis" in self.query:
                sp("how can i help you")
                self.taskexecute()
    



    def takecommand(self):
        r=sr.Recognizer()
        with sr.Microphone() as source:
            print("listening.....")
            r.pause_threshold=2.2
            audio=r.listen(source)
        try:
            print("recognizing...")
            query=r.recognize_google(audio,language="en-in")
            print("user said:",query)
        except Exception as e:
            print(e)
            print("say something")
            return "none"
        return query
    def taskexecute(self):

        while True:
            self.query=self.takecommand().lower()
            if "wikipedia"in self.query:
                sp("searching wikipedia.....")
                self.query=self.query.replace("wikipedia","")
                results=wikipedia.summary(self.query,sentences=2)
                sp("according to wikipedia")
                sp(results)
            elif "time" in self.query:
                #self.query = self.query.replace("time", "")
                sp("sir the time is"+ str(dt.datetime.now().strftime("%H:%M:%S")))
            #elif "ayush"in self.query:
                #query = query.replace("ayush", "")
                #sp("Ayush is ayushika mandhana , beat him")
            elif "exit" in self.query:
                #query = query.replace("exit", "")
                sp("THANKYOU SIR FOR USING ME! call me again by saying ok jarvis")
                break
            elif "google" == self.query:
                sp("what do you want to search on google")
                a=self.takecommand().lower()
                sp("searching"+a+"on google")
                kit.search(a)
            elif "youtube" in self.query:
                #query = query.replace("youtube", "")
                sp("do you want custom search or just youtube")
                q2=self.takecommand().lower()
                if "custom" in q2:
                    sp("please say the keyword you want to search")
                    q3=self.takecommand().lower()
                    kit.playonyt(q3)
                    sp("task completed successfully what's next")
                else:
                    webbrowser.open("www.youtube.com")
                    sp("task completed successfully what's next")
            elif"notepad" in self.query:
                #query=query.replace("open notepad","")
                os.startfile("C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\\notepad")
                sp("task completed successfully what's next")
            elif "play music" in self.query:

                #query = query.replace("play music", "")
                musicdir="F:\musicdir"
                songs=os.listdir(musicdir)
                a=rd.randint(1,len(songs)-1)
                os.startfile(os.path.join(musicdir,songs[a]))
                sp("task completed successfully what's next")

            elif"calculator"in self.query:
                os.startfile("C:\Windows\WinSxS\\amd64_microsoft-windows-calc_31bf3856ad364e35_10.0.19041.1_none_5faf0ebeba197e78\\calc.exe")
                sp("task completed successfully what's next")
            elif "dev" in self.query:
                os.startfile("C:\Program Files (x86)\Dev-Cpp\devcpp.exe")
                sp("task completed successfully what's next")

            elif "stack" in self.query:
                webbrowser.open("www.stackoverflow.com")
                sp("task completed successfully what's next")
            elif "meet" in self.query:
                webbrowser.open("https://mail.google.com/mail/u/1/#calls")
                sp("task completed successfully what's next")
            elif "class" in self.query:
                webbrowser.open("https://classroom.google.com/u/1/h")
                sp("task completed successfully what's next")


            elif"instagram"in self.query:
                webbrowser.open("www.instagram.com")
                sp("task completed successfully what's next")
            elif "how to do mode" in self.query:
                sp("how to do mode iS ACTIVATED")
                while True:
                    sp("please tell me what you want to know")
                    how = self.takecommand().lower()
                    try:
                        if "exit" in how or "close" in how:
                            sp("okay sir exiting how to do mode")
                            break
                        else:
                            maxres = 1
                            how_to = search_wikihow(how, maxres)
                            assert len(how_to) == 1
                            how_to[0].print()
                            sp(how_to[0].summary)
                    except Exception as e:
                        sp("sorry sir not able to find this")
            elif "how are you" in self.query:
                sp("i am fine what about you")


            elif "virtual mouse" in self.query:
                sp("for how much time do you want to use virtual mouse")
                time1=self.takecommand().lower()
                sp("activating virtual mouse for"+(time1))
                num=[]
                for t in time1.split():
                    if t.isdigit():
                        num.append(int(t))
                if "seconds" in time1:
                    import time
                    tend=time.time()+num[0]
                if "minutes" or "minute" in time1:
                    import time
                    tend=time.time()+num[0]*60


                import cv2
                import numpy as np
                import htm
                import pyautogui
                import time
                q4=0
                wcam, hcam = 640, 480
                cap = cv2.VideoCapture(0)
                cap.set(3, wcam)
                cap.set(4, hcam)
                ptime = 0
                wscr, hscr = pyautogui.size()
                detector = htm.handDetector(maxHands=1)
                frameR = 165
                smoothening = 20
                plocx, plocy = 0, 0
                clocx, clocy = 0, 0
                while time.time()< tend:
                    success, img = cap.read()
                    img = detector.findHands(img)
                    lmList, bbox = detector.findPosition(img)
                    if len(lmList) != 0:
                        x1, y1 = lmList[8][1:]
                        x2, y2 = lmList[12][1:]
                        # print(x1,y1,x2,y2)
                        fingers = detector.fingersup()
                        cv2.rectangle(img, (frameR, frameR), (wcam - frameR, hcam - frameR), (255, 0, 255), 2)
                        # print(fingers)
                        if fingers[1] == 1 and fingers[2] == 0:
                            cv2.rectangle(img, (frameR, frameR), (wcam - frameR, hcam - frameR), (255, 0, 255), 2)
                            x3 = np.interp(x1, (frameR, wcam - frameR), (0, wscr))
                            y3 = np.interp(y1, (frameR, hcam - frameR), (0, hscr))
                            clocx = plocx + (x3 - plocx) / smoothening
                            clocy = plocy + (y3 - plocy) / smoothening
                            pyautogui.moveTo(wscr - x3, y3)
                            cv2.circle(img, (x1, y1), 15, (255, 0, 255), cv2.FILLED)
                            plocx, plocy = clocx, clocy
                        if fingers[1] == 1 and fingers[2] == 1:
                            length, img, lineinfo = detector.findDistance(8, 12, img)
                            if length < 40:
                                cv2.circle(img, (lineinfo[4], lineinfo[5]), 15, (0, 255, 0), cv2.FILLED)
                                pyautogui.click()
                        if fingers[1] == 1 and fingers[2] == 1 and fingers[3] == 1:
                            pyautogui.scroll(35)
                        if fingers[0] == 1 and fingers[1] == 1:
                            pyautogui.scroll(-35)

                    ctime = time.time()
                    fps = 1 / (ctime - ptime)
                    ptime = ctime
                    cv2.putText(img, str(int(fps)), (20, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)
                    cv2.imshow('image', img)
                    cv2.waitKey(1)
                cap.release()
                cv2.destroyAllWindows()
                sp("deactivated virtual mouse after" + time1)
                sp("task completed successfully what's next")

            elif "message" in self.query:
                sp("whom to send sir")
                p=self.takecommand().lower()
                asi=contactl[p]
                sp("what should i say")
                msg=self.takecommand().lower()
                sp("at what hour")
                h=self.takecommand().lower()
                sp("at what minute")
                m=self.takecommand().lower()
                kit.sendwhatmsg(asi,msg + "(sent by jarvis)",int(h),int(m))
                sp("task completed successfully what's next")
            elif "keyboard" in self.query:
                sp("for how much time do you want to use virtual keyboard")
                time1 = self.takecommand().lower()
                sp("activating virtual keyboard for" + (time1))
                num = []
                for t in time1.split():
                    if t.isdigit():
                        num.append(int(t))
                if "seconds" in time1:
                    import time
                    tend = time.time() + num[0]
                if "minutes" or "minute" in time1:
                    import time
                    tend = time.time() + num[0] * 60
                import cv2
                import htm
                import time
                from pynput.keyboard import Key, Controller
                cap = cv2.VideoCapture(0)
                cap.set(3, 1280)
                cap.set(4, 720)
                detector = htm.handDetector(detectionCon=0.8)
                keys = [["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
                        ["A", "S", "D", "F", "G", "H", "J", "K", "L", ";", "'"],
                        ["Z", "X", "C", "V", "B", "N", "M", ",", ".", " "
                         ], ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"]]
                finaltext = ""
                keyboard = Controller()

                # finger=detector.fingersup()

                def drawall(img, buttonlist):
                    for button in buttonlist:
                        x, y = button.pos
                        w, h = button.size
                        cv2.rectangle(img, (x, y), (x + w, y + h), (12, 0, 255), cv2.FILLED)
                        cv2.putText(img, button.text, (x + 10, y + 65), cv2.FONT_HERSHEY_PLAIN, 5, (255, 255, 255), 5)
                    return img

                class button():
                    def __init__(self, pos, text, size=(85, 85)):
                        self.pos = pos
                        self.text = text
                        self.size = size

                    def draw(self):
                        x, y = self.pos
                        w, h = self.size
                        cv2.rectangle(img, (x, y), (x + w, y + h), (12, 0, 255), cv2.FILLED)
                        cv2.putText(img, self.text, (x + 10, y + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255, 255, 255), 4)

                bkp = button((1060, 50), "bk")
                buttonlist = []
                for i in range(len(keys)):
                    for j, key in enumerate(keys[i]):
                        buttonlist.append(button([100 * j + 50, 100 * i + 50], key))
                while time.time()<tend:
                    success, img = cap.read()
                    img = cv2.flip(img, 1)
                    img = detector.findHands(img)
                    lmlist, bbox = detector.findPosition(img)
                    bkp.draw()
                    img = drawall(img, buttonlist)
                    if lmlist:
                        if 1060 < lmlist[8][1] < 1145 and 50 < lmlist[8][2] < 135:
                            cv2.rectangle(img, (1060, 50), (1145, 135), (0, 0, 175), cv2.FILLED)
                            cv2.putText(img, "bk", (1060 + 10, 50 + 65), cv2.FONT_HERSHEY_PLAIN, 4, (255, 255, 255), 4)
                            l, _, _ = detector.findDistance(8, 12, img)
                            BKP = 1
                            if l < 30 and BKP == 1:
                                keyboard.press(Key.backspace)
                                keyboard.release(Key.backspace)
                                time.sleep(0.15)
                        else:
                            BKP = 0
                        for button in buttonlist:
                            x, y = button.pos
                            w, h = button.size
                            if x < lmlist[8][1] < x + w and y < lmlist[8][2] < y + h and BKP == 0:
                                cv2.rectangle(img, button.pos, (x + w, y + h), (175, 0, 175), cv2.FILLED)
                                cv2.putText(img, button.text, (x + 10, y + 65), cv2.FONT_HERSHEY_PLAIN, 5,
                                            (255, 255, 255), 5)
                                l, _, _ = detector.findDistance(8, 12, img)
                                BKP = 0
                                if l < 30 and BKP == 0:
                                    keyboard.press(button.text)
                                    cv2.rectangle(img, button.pos, (x + w + 25, y + h + 25), (0, 255, 0), cv2.FILLED)
                                    cv2.putText(img, button.text, (x + 10, y + 65), cv2.FONT_HERSHEY_PLAIN, 5,
                                                (255, 255, 255), 5)
                                    finaltext += button.text
                                    time.sleep(0.25)
                    cv2.imshow("image", img)
                    cv2.waitKey(1)
                cap.release()
                cv2.destroyAllWindows()
                sp("deactivated virtual mouse after" + time1)
                sp("task completed successfully what's next")

            elif "canvas" in self.query:
                import cv2
                import numpy as np
                import htm
                import time
                sp("for how much time do you want to use air canvas")
                time1 = self.takecommand().lower()
                sp("activating air canvas for" + (time1))
                num = []
                for t in time1.split():
                    if t.isdigit():
                        num.append(int(t))
                if "seconds" in time1:
                    import time
                    tend =time.time()+ num[0]

                if "minutes" or "minute" in time1:
                    import time
                    tend = time.time() + num[0] * 60

                folderpath = "header"
                mylist = os.listdir(folderpath)
                print(mylist)
                overlaylist = []
                for impath in mylist:
                    img = cv2.imread(f'{folderpath}/{impath}')
                    overlaylist.append(img)
                # print(len(overlaylist))
                header = overlaylist[0]
                xp, yp = 0, 0
                brusht = 10
                erasert = 70
                imgcanvas = np.zeros((720, 1280, 3), np.uint8)
                drawcolor = (255, 0, 255)
                cap = cv2.VideoCapture(0)
                cap.set(3, 1280)
                cap.set(4, 720)
                detector = htm.handDetector(detectionCon=0.85)
                while time.time()< tend:
                    success, img1 = cap.read()
                    img1 = cv2.flip(img1, 1)
                    img = detector.findHands(img1)
                    lmlist, bbox = detector.findPosition(img1, draw=False)
                    if len(lmlist) != 0:
                        x2, y2 = lmlist[12][1:]
                        x1, y1 = lmlist[8][1:]
                        fingers = detector.fingersup()
                        if fingers[1] and fingers[2]:
                            xp, yp = 0, 0
                            cv2.rectangle(img, (x1, y1 - 25), (x2, y2 + 25), drawcolor, cv2.FILLED)
                            # print("selection mode")
                            if y1 < 125:
                                if 258 < x1 < 450:
                                    header = overlaylist[0]
                                    drawcolor = (255, 0, 255)
                                elif 0 < x1 < 256:
                                    drawcolor = (0, 0, 200)
                                    cv2.putText(img1, "square mode", (100, 255), cv2.FONT_HERSHEY_PLAIN, 5, (255, 0, 0),
                                                6)
                                elif 451 < x1 < 560:
                                    drawcolor = (0, 255, 255)
                                    cv2.putText(img1, "circle mode", (100, 255), cv2.FONT_HERSHEY_PLAIN, 5, (255, 0, 0),
                                                6)
                                elif 672 < x1 < 770:
                                    drawcolor = (50, 255, 255)
                                    cv2.putText(img1, "triangle mode", (100, 255), cv2.FONT_HERSHEY_PLAIN, 5,
                                                (255, 0, 0), 6)
                                elif 567 < x1 < 670:
                                    header = overlaylist[2]
                                    drawcolor = (0, 255, 25)
                                elif 772 < x1 < 872:
                                    header = overlaylist[1]
                                    drawcolor = (255, 22, 100)
                                elif 1017 < x1 < 1133:
                                    header = overlaylist[3]
                                    brusht = 10
                                    drawcolor = (0, 0, 0)
                                    CLS=0
                                elif 873 < x1 < 900:
                                    drawcolor = (0, 0, 0)
                                    CLS = 1
                                    # cv2.rectangle(img,(0,0),(1280,720),drawcolor,cv2.FILLED)
                                    cv2.putText(img1, "CLEAR SCREEN", (100, 255), cv2.FONT_HERSHEY_PLAIN, 5,
                                                (255, 0, 0), 6)
                        if fingers[1] and fingers[2] == False:
                            cv2.circle(img1, (x1, y1), 15, drawcolor, cv2.FILLED)
                            # print("drawing mode")
                            if xp == 0 and yp == 0:
                                xp, yp = x1, y1
                            if drawcolor == (0, 0, 0) and CLS == 1:
                                cv2.rectangle(img1, (0, 0), (1280, 720), drawcolor, cv2.FILLED)
                                cv2.rectangle(imgcanvas, (0, 0), (1280, 720), drawcolor, cv2.FILLED)

                            if drawcolor == (0, 0, 0) and CLS == 0:
                                cv2.line(img, (xp, yp), (x1, y1), drawcolor, erasert)
                                cv2.line(imgcanvas, (xp, yp), (x1, y1), drawcolor, erasert)

                            elif drawcolor == (0, 255, 255):
                                cv2.circle(img1, (x1, y1), 125, drawcolor,5)
                                cv2.circle(imgcanvas, (x1, y1), 125, drawcolor,5)
                                time.sleep(0.3)
                            elif drawcolor == (0, 0, 200):
                                cv2.rectangle(img, (xp, yp), (xp + 250, yp + 250), drawcolor, thickness=5)
                                cv2.rectangle(imgcanvas, (xp, yp), (xp + 250, yp + 250), drawcolor, thickness=5)
                                time.sleep(0.3)
                            elif drawcolor == (50, 255, 255):
                                cv2.line(img1, (xp, yp), (xp, yp + 200), drawcolor, 5)
                                cv2.line(imgcanvas, (xp, yp), (xp, yp + 200), drawcolor, 5)
                                cv2.line(img1, (xp, yp + 200), (xp + 200, yp + 200), drawcolor, 5)
                                cv2.line(imgcanvas, (xp, yp + 200), (xp + 200, yp + 200), drawcolor, 5)
                                cv2.line(img1, (xp + 200, yp + 200), (xp, yp), drawcolor, 5)
                                cv2.line(imgcanvas, (xp + 200, yp + 200), (xp, yp), drawcolor, 5)
                                time.sleep(0.3)
                            else:
                                cv2.line(img1, (xp, yp), (x1, y1), drawcolor, brusht)
                                cv2.line(imgcanvas, (xp, yp), (x1, y1), drawcolor, brusht)
                            xp, yp = x1, y1
                    imggray = cv2.cvtColor(imgcanvas, cv2.COLOR_BGR2GRAY)
                    _, imginv = cv2.threshold(imggray, 58, 255, cv2.THRESH_BINARY_INV)
                    imginv = cv2.cvtColor(imginv, cv2.COLOR_GRAY2BGR)
                    img1 = cv2.bitwise_and(img1, imginv)
                    img1 = cv2.bitwise_or(img1, imgcanvas)
                    img1[0:125, 0:1280] = header
                    # img1=cv2.addWeighted(img,0.5,imgcanvas,0.5,0)
                    cv2.imshow("canvas", imgcanvas)
                    cv2.imshow("image", img1)
                    # cv2.imshow("inv",imginv)
                    cv2.waitKey(1)
                cap.release()
                cv2.destroyAllWindows()
                sp("deactivated air canvas after" + time1)
                sp("task completed successfully what's next")
            elif "rock paper" in self.query:
                sp("let's play")
                sp("how many games to play ")
                i=self.takecommand()
                import htm
                import cv2
                import random
                import time
                cc = ["rock", "paper", "scissor"]
                detector = htm.handDetector(maxHands=1)
                cap = cv2.VideoCapture(0)
                cap.set(3, 1920)
                cap.set(4, 1080)
                ys = 0
                cs = 0
                nog = 0
                # i=int(input("no of games"))
                while nog<=int(i):
                    b = random.choice(cc)
                    success, img = cap.read()
                    img = detector.findHands(img)
                    lmlist, bbox = detector.findPosition(img)
                    fingers = detector.fingersup()
                    if fingers[0] == 1 and fingers[1] == 1 and fingers[2] == 1 and fingers[3] == 1 and fingers[4] == 1:
                        c = "paper"
                        cv2.putText(img, "your choice:" + c, (20, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)

                    elif fingers[1] == 1 and fingers[2] == 1:
                        c = "scissor"
                        cv2.putText(img, "your choice:" + c, (20, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)

                    else:
                        c = "rock"
                        cv2.putText(img, "your choice:" + c, (20, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)

                    if b == c:
                        cv2.putText(img, "it's a draw", (24, 94), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)
                        cv2.putText(img, "computer c:" + b, (24, 125), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 255), 3)
                        cv2.putText(img, "you:" + str(ys) + "||" + "jarvis:" + str(cs), (24, 160),
                                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 255), 3)
                        nog += 1

                    elif (b == "rock" and c == "scissor") or (b == "scissor" and c == "paper") or (
                            b == "paper" and c == "rock"):
                        cv2.putText(img, "you lose", (24, 94), cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 3)
                        cs += 1
                        cv2.putText(img, "computer c:" + b, (24, 125),
                                    cv2.FONT_HERSHEY_PLAIN, 3, (255, 255, 0), 3)
                        cv2.putText(img, "you:" + str(ys) + "||" + "jarvis:" + str(cs), (24, 160),
                                    cv2.FONT_HERSHEY_PLAIN, 3, (255, 255, 0), 3)
                        nog += 1
                    else:
                        cv2.putText(img, "you win", (24, 94), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)
                        ys += 1
                        cv2.putText(img, "computer c:" + b, (24, 125),
                                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)
                        cv2.putText(img, "you:" + str(ys) + "||" + "jarvis:" + str(cs), (24, 160),
                                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)
                        nog += 1
                    cv2.imshow("image", img)
                    cv2.waitKey(1)
                    time.sleep(1.2)
                cap.release()
                cv2.destroyAllWindows()
                if ys>cs:
                    sp("great sir , you win")
                elif ys==cs:
                    sp("nice game, it's a draw")
                else :
                    sp("yeeah, i win")
                sp("task completed successfully what's next")
            elif "None" in self.query :
                sp("please say that again")




            else:
                sp("please say that again")
startexecution=MainThread()
class Main(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_mainWindow()
        self.ui.setupUi(self)
        self.ui.pushButton.clicked.connect(self.startTask)
        self.ui.pushButton_2.clicked.connect(self.close)




    def startTask(self):
         self.ui.movie=QtGui.QMovie("7LP8.gif")
         self.ui.label.setMovie(self.ui.movie)
         self.ui.movie.start()
         self.ui.movie = QtGui.QMovie("01e6dc0aae39517096fd5730f1eb07ae.gif")
         self.ui.label_2.setMovie(self.ui.movie)
         self.ui.movie.start()
         self.ui.movie = QtGui.QMovie("T8bahf.gif")
         self.ui.label_3.setMovie(self.ui.movie)
         self.ui.movie.start()
         timer=QTimer(self)
         timer.timeout.connect(self.showTime)
         timer.start(1000)
         startexecution.start()


    def showTime(self):
        cutime=QTime.currentTime()
        cudate=QDate.currentDate()
        label_time=cutime.toString("hh:mm:ss")
        label_date=cudate.toString(Qt.ISODate)
        self.ui.textBrowser.setText(label_date)
        self.ui.textBrowser_2.setText(label_time)





app=QApplication(sys.argv)
jarvis=Main()
jarvis.show()
exit(app.exec_())











